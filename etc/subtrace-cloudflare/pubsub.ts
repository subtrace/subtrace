// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: pubsub.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "subtrace.pubsub";

/** POST /api/JoinPublisher */
export interface JoinPublisher {
}

export interface JoinPublisher_Request {
  linkIdOverride?: string | undefined;
}

export interface JoinPublisher_Response {
  error?: string | undefined;
  websocketUrl: string;
}

/** POST /api/JoinSubscriber */
export interface JoinSubscriber {
}

export interface JoinSubscriber_Request {
  namespaceId?: string | undefined;
}

export interface JoinSubscriber_Response {
  error?: string | undefined;
  websocketUrl: string;
}

/** POST /api/PublishEvents */
export interface PublishEvents {
}

export interface PublishEvents_Request {
  events: Event[];
}

export interface PublishEvents_Response {
  error?: string | undefined;
}

export interface Event {
  concreteV1?: Event_V1 | undefined;
}

export interface Event_Log {
  lines: string[];
  index: number;
}

export interface Event_V1 {
  tags: { [key: string]: string };
  harEntryJson: Uint8Array;
  log: Event_Log | undefined;
}

export interface Event_V1_TagsEntry {
  key: string;
  value: string;
}

export interface SetSubscriberConfig {
  concreteV1?: SetSubscriberConfig_V1 | undefined;
}

export interface SetSubscriberConfig_V1 {
  call?: SetSubscriberConfig_V1_Call | undefined;
  result?: SetSubscriberConfig_V1_Result | undefined;
}

export interface SetSubscriberConfig_V1_Call {
  revision: number;
  filters: string[];
}

export interface SetSubscriberConfig_V1_Result {
  revision: number;
  error?: string | undefined;
}

export interface AnnounceStats {
  concreteV1?: AnnounceStats_V1 | undefined;
}

export interface AnnounceStats_V1 {
  numPublishers: number;
  numSubscribers: number;
}

export interface Message {
  concreteV1?: Message_V1 | undefined;
}

export interface Message_V1 {
  event?: Event | undefined;
  setSubscriberConfig?: SetSubscriberConfig | undefined;
  announceStats?: AnnounceStats | undefined;
}

function createBaseJoinPublisher(): JoinPublisher {
  return {};
}

export const JoinPublisher: MessageFns<JoinPublisher> = {
  encode(_: JoinPublisher, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinPublisher {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinPublisher();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): JoinPublisher {
    return {};
  },

  toJSON(_: JoinPublisher): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinPublisher>, I>>(base?: I): JoinPublisher {
    return JoinPublisher.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinPublisher>, I>>(_: I): JoinPublisher {
    const message = createBaseJoinPublisher();
    return message;
  },
};

function createBaseJoinPublisher_Request(): JoinPublisher_Request {
  return { linkIdOverride: undefined };
}

export const JoinPublisher_Request: MessageFns<JoinPublisher_Request> = {
  encode(message: JoinPublisher_Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.linkIdOverride !== undefined) {
      writer.uint32(10).string(message.linkIdOverride);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinPublisher_Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinPublisher_Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.linkIdOverride = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinPublisher_Request {
    return { linkIdOverride: isSet(object.linkIdOverride) ? globalThis.String(object.linkIdOverride) : undefined };
  },

  toJSON(message: JoinPublisher_Request): unknown {
    const obj: any = {};
    if (message.linkIdOverride !== undefined) {
      obj.linkIdOverride = message.linkIdOverride;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinPublisher_Request>, I>>(base?: I): JoinPublisher_Request {
    return JoinPublisher_Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinPublisher_Request>, I>>(object: I): JoinPublisher_Request {
    const message = createBaseJoinPublisher_Request();
    message.linkIdOverride = object.linkIdOverride ?? undefined;
    return message;
  },
};

function createBaseJoinPublisher_Response(): JoinPublisher_Response {
  return { error: undefined, websocketUrl: "" };
}

export const JoinPublisher_Response: MessageFns<JoinPublisher_Response> = {
  encode(message: JoinPublisher_Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== undefined) {
      writer.uint32(8002).string(message.error);
    }
    if (message.websocketUrl !== "") {
      writer.uint32(10).string(message.websocketUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinPublisher_Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinPublisher_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1000: {
          if (tag !== 8002) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.websocketUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinPublisher_Response {
    return {
      error: isSet(object.error) ? globalThis.String(object.error) : undefined,
      websocketUrl: isSet(object.websocketUrl) ? globalThis.String(object.websocketUrl) : "",
    };
  },

  toJSON(message: JoinPublisher_Response): unknown {
    const obj: any = {};
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    if (message.websocketUrl !== "") {
      obj.websocketUrl = message.websocketUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinPublisher_Response>, I>>(base?: I): JoinPublisher_Response {
    return JoinPublisher_Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinPublisher_Response>, I>>(object: I): JoinPublisher_Response {
    const message = createBaseJoinPublisher_Response();
    message.error = object.error ?? undefined;
    message.websocketUrl = object.websocketUrl ?? "";
    return message;
  },
};

function createBaseJoinSubscriber(): JoinSubscriber {
  return {};
}

export const JoinSubscriber: MessageFns<JoinSubscriber> = {
  encode(_: JoinSubscriber, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinSubscriber {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinSubscriber();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): JoinSubscriber {
    return {};
  },

  toJSON(_: JoinSubscriber): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinSubscriber>, I>>(base?: I): JoinSubscriber {
    return JoinSubscriber.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinSubscriber>, I>>(_: I): JoinSubscriber {
    const message = createBaseJoinSubscriber();
    return message;
  },
};

function createBaseJoinSubscriber_Request(): JoinSubscriber_Request {
  return { namespaceId: undefined };
}

export const JoinSubscriber_Request: MessageFns<JoinSubscriber_Request> = {
  encode(message: JoinSubscriber_Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.namespaceId !== undefined) {
      writer.uint32(10).string(message.namespaceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinSubscriber_Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinSubscriber_Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.namespaceId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinSubscriber_Request {
    return { namespaceId: isSet(object.namespaceId) ? globalThis.String(object.namespaceId) : undefined };
  },

  toJSON(message: JoinSubscriber_Request): unknown {
    const obj: any = {};
    if (message.namespaceId !== undefined) {
      obj.namespaceId = message.namespaceId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinSubscriber_Request>, I>>(base?: I): JoinSubscriber_Request {
    return JoinSubscriber_Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinSubscriber_Request>, I>>(object: I): JoinSubscriber_Request {
    const message = createBaseJoinSubscriber_Request();
    message.namespaceId = object.namespaceId ?? undefined;
    return message;
  },
};

function createBaseJoinSubscriber_Response(): JoinSubscriber_Response {
  return { error: undefined, websocketUrl: "" };
}

export const JoinSubscriber_Response: MessageFns<JoinSubscriber_Response> = {
  encode(message: JoinSubscriber_Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== undefined) {
      writer.uint32(8002).string(message.error);
    }
    if (message.websocketUrl !== "") {
      writer.uint32(10).string(message.websocketUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinSubscriber_Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinSubscriber_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1000: {
          if (tag !== 8002) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.websocketUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinSubscriber_Response {
    return {
      error: isSet(object.error) ? globalThis.String(object.error) : undefined,
      websocketUrl: isSet(object.websocketUrl) ? globalThis.String(object.websocketUrl) : "",
    };
  },

  toJSON(message: JoinSubscriber_Response): unknown {
    const obj: any = {};
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    if (message.websocketUrl !== "") {
      obj.websocketUrl = message.websocketUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinSubscriber_Response>, I>>(base?: I): JoinSubscriber_Response {
    return JoinSubscriber_Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinSubscriber_Response>, I>>(object: I): JoinSubscriber_Response {
    const message = createBaseJoinSubscriber_Response();
    message.error = object.error ?? undefined;
    message.websocketUrl = object.websocketUrl ?? "";
    return message;
  },
};

function createBasePublishEvents(): PublishEvents {
  return {};
}

export const PublishEvents: MessageFns<PublishEvents> = {
  encode(_: PublishEvents, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublishEvents {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublishEvents();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PublishEvents {
    return {};
  },

  toJSON(_: PublishEvents): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PublishEvents>, I>>(base?: I): PublishEvents {
    return PublishEvents.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublishEvents>, I>>(_: I): PublishEvents {
    const message = createBasePublishEvents();
    return message;
  },
};

function createBasePublishEvents_Request(): PublishEvents_Request {
  return { events: [] };
}

export const PublishEvents_Request: MessageFns<PublishEvents_Request> = {
  encode(message: PublishEvents_Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublishEvents_Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublishEvents_Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublishEvents_Request {
    return { events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [] };
  },

  toJSON(message: PublishEvents_Request): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublishEvents_Request>, I>>(base?: I): PublishEvents_Request {
    return PublishEvents_Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublishEvents_Request>, I>>(object: I): PublishEvents_Request {
    const message = createBasePublishEvents_Request();
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    return message;
  },
};

function createBasePublishEvents_Response(): PublishEvents_Response {
  return { error: undefined };
}

export const PublishEvents_Response: MessageFns<PublishEvents_Response> = {
  encode(message: PublishEvents_Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== undefined) {
      writer.uint32(8002).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublishEvents_Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublishEvents_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1000: {
          if (tag !== 8002) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublishEvents_Response {
    return { error: isSet(object.error) ? globalThis.String(object.error) : undefined };
  },

  toJSON(message: PublishEvents_Response): unknown {
    const obj: any = {};
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublishEvents_Response>, I>>(base?: I): PublishEvents_Response {
    return PublishEvents_Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublishEvents_Response>, I>>(object: I): PublishEvents_Response {
    const message = createBasePublishEvents_Response();
    message.error = object.error ?? undefined;
    return message;
  },
};

function createBaseEvent(): Event {
  return { concreteV1: undefined };
}

export const Event: MessageFns<Event> = {
  encode(message: Event, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.concreteV1 !== undefined) {
      Event_V1.encode(message.concreteV1, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.concreteV1 = Event_V1.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return { concreteV1: isSet(object.concreteV1) ? Event_V1.fromJSON(object.concreteV1) : undefined };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.concreteV1 !== undefined) {
      obj.concreteV1 = Event_V1.toJSON(message.concreteV1);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event>, I>>(base?: I): Event {
    return Event.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event>, I>>(object: I): Event {
    const message = createBaseEvent();
    message.concreteV1 = (object.concreteV1 !== undefined && object.concreteV1 !== null)
      ? Event_V1.fromPartial(object.concreteV1)
      : undefined;
    return message;
  },
};

function createBaseEvent_Log(): Event_Log {
  return { lines: [], index: 0 };
}

export const Event_Log: MessageFns<Event_Log> = {
  encode(message: Event_Log, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.lines) {
      writer.uint32(10).string(v!);
    }
    if (message.index !== 0) {
      writer.uint32(16).uint64(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event_Log {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent_Log();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lines.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.index = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event_Log {
    return {
      lines: globalThis.Array.isArray(object?.lines) ? object.lines.map((e: any) => globalThis.String(e)) : [],
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
    };
  },

  toJSON(message: Event_Log): unknown {
    const obj: any = {};
    if (message.lines?.length) {
      obj.lines = message.lines;
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event_Log>, I>>(base?: I): Event_Log {
    return Event_Log.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event_Log>, I>>(object: I): Event_Log {
    const message = createBaseEvent_Log();
    message.lines = object.lines?.map((e) => e) || [];
    message.index = object.index ?? 0;
    return message;
  },
};

function createBaseEvent_V1(): Event_V1 {
  return { tags: {}, harEntryJson: new Uint8Array(0), log: undefined };
}

export const Event_V1: MessageFns<Event_V1> = {
  encode(message: Event_V1, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.tags).forEach(([key, value]) => {
      Event_V1_TagsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.harEntryJson.length !== 0) {
      writer.uint32(18).bytes(message.harEntryJson);
    }
    if (message.log !== undefined) {
      Event_Log.encode(message.log, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event_V1 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent_V1();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = Event_V1_TagsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.tags[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.harEntryJson = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.log = Event_Log.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event_V1 {
    return {
      tags: isObject(object.tags)
        ? Object.entries(object.tags).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      harEntryJson: isSet(object.harEntryJson) ? bytesFromBase64(object.harEntryJson) : new Uint8Array(0),
      log: isSet(object.log) ? Event_Log.fromJSON(object.log) : undefined,
    };
  },

  toJSON(message: Event_V1): unknown {
    const obj: any = {};
    if (message.tags) {
      const entries = Object.entries(message.tags);
      if (entries.length > 0) {
        obj.tags = {};
        entries.forEach(([k, v]) => {
          obj.tags[k] = v;
        });
      }
    }
    if (message.harEntryJson.length !== 0) {
      obj.harEntryJson = base64FromBytes(message.harEntryJson);
    }
    if (message.log !== undefined) {
      obj.log = Event_Log.toJSON(message.log);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event_V1>, I>>(base?: I): Event_V1 {
    return Event_V1.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event_V1>, I>>(object: I): Event_V1 {
    const message = createBaseEvent_V1();
    message.tags = Object.entries(object.tags ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.harEntryJson = object.harEntryJson ?? new Uint8Array(0);
    message.log = (object.log !== undefined && object.log !== null) ? Event_Log.fromPartial(object.log) : undefined;
    return message;
  },
};

function createBaseEvent_V1_TagsEntry(): Event_V1_TagsEntry {
  return { key: "", value: "" };
}

export const Event_V1_TagsEntry: MessageFns<Event_V1_TagsEntry> = {
  encode(message: Event_V1_TagsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event_V1_TagsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent_V1_TagsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event_V1_TagsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Event_V1_TagsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event_V1_TagsEntry>, I>>(base?: I): Event_V1_TagsEntry {
    return Event_V1_TagsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event_V1_TagsEntry>, I>>(object: I): Event_V1_TagsEntry {
    const message = createBaseEvent_V1_TagsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseSetSubscriberConfig(): SetSubscriberConfig {
  return { concreteV1: undefined };
}

export const SetSubscriberConfig: MessageFns<SetSubscriberConfig> = {
  encode(message: SetSubscriberConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.concreteV1 !== undefined) {
      SetSubscriberConfig_V1.encode(message.concreteV1, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetSubscriberConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSubscriberConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.concreteV1 = SetSubscriberConfig_V1.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSubscriberConfig {
    return { concreteV1: isSet(object.concreteV1) ? SetSubscriberConfig_V1.fromJSON(object.concreteV1) : undefined };
  },

  toJSON(message: SetSubscriberConfig): unknown {
    const obj: any = {};
    if (message.concreteV1 !== undefined) {
      obj.concreteV1 = SetSubscriberConfig_V1.toJSON(message.concreteV1);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetSubscriberConfig>, I>>(base?: I): SetSubscriberConfig {
    return SetSubscriberConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetSubscriberConfig>, I>>(object: I): SetSubscriberConfig {
    const message = createBaseSetSubscriberConfig();
    message.concreteV1 = (object.concreteV1 !== undefined && object.concreteV1 !== null)
      ? SetSubscriberConfig_V1.fromPartial(object.concreteV1)
      : undefined;
    return message;
  },
};

function createBaseSetSubscriberConfig_V1(): SetSubscriberConfig_V1 {
  return { call: undefined, result: undefined };
}

export const SetSubscriberConfig_V1: MessageFns<SetSubscriberConfig_V1> = {
  encode(message: SetSubscriberConfig_V1, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.call !== undefined) {
      SetSubscriberConfig_V1_Call.encode(message.call, writer.uint32(10).fork()).join();
    }
    if (message.result !== undefined) {
      SetSubscriberConfig_V1_Result.encode(message.result, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetSubscriberConfig_V1 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSubscriberConfig_V1();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.call = SetSubscriberConfig_V1_Call.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.result = SetSubscriberConfig_V1_Result.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSubscriberConfig_V1 {
    return {
      call: isSet(object.call) ? SetSubscriberConfig_V1_Call.fromJSON(object.call) : undefined,
      result: isSet(object.result) ? SetSubscriberConfig_V1_Result.fromJSON(object.result) : undefined,
    };
  },

  toJSON(message: SetSubscriberConfig_V1): unknown {
    const obj: any = {};
    if (message.call !== undefined) {
      obj.call = SetSubscriberConfig_V1_Call.toJSON(message.call);
    }
    if (message.result !== undefined) {
      obj.result = SetSubscriberConfig_V1_Result.toJSON(message.result);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetSubscriberConfig_V1>, I>>(base?: I): SetSubscriberConfig_V1 {
    return SetSubscriberConfig_V1.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetSubscriberConfig_V1>, I>>(object: I): SetSubscriberConfig_V1 {
    const message = createBaseSetSubscriberConfig_V1();
    message.call = (object.call !== undefined && object.call !== null)
      ? SetSubscriberConfig_V1_Call.fromPartial(object.call)
      : undefined;
    message.result = (object.result !== undefined && object.result !== null)
      ? SetSubscriberConfig_V1_Result.fromPartial(object.result)
      : undefined;
    return message;
  },
};

function createBaseSetSubscriberConfig_V1_Call(): SetSubscriberConfig_V1_Call {
  return { revision: 0, filters: [] };
}

export const SetSubscriberConfig_V1_Call: MessageFns<SetSubscriberConfig_V1_Call> = {
  encode(message: SetSubscriberConfig_V1_Call, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.revision !== 0) {
      writer.uint32(8).uint64(message.revision);
    }
    for (const v of message.filters) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetSubscriberConfig_V1_Call {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSubscriberConfig_V1_Call();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.revision = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.filters.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSubscriberConfig_V1_Call {
    return {
      revision: isSet(object.revision) ? globalThis.Number(object.revision) : 0,
      filters: globalThis.Array.isArray(object?.filters) ? object.filters.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: SetSubscriberConfig_V1_Call): unknown {
    const obj: any = {};
    if (message.revision !== 0) {
      obj.revision = Math.round(message.revision);
    }
    if (message.filters?.length) {
      obj.filters = message.filters;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetSubscriberConfig_V1_Call>, I>>(base?: I): SetSubscriberConfig_V1_Call {
    return SetSubscriberConfig_V1_Call.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetSubscriberConfig_V1_Call>, I>>(object: I): SetSubscriberConfig_V1_Call {
    const message = createBaseSetSubscriberConfig_V1_Call();
    message.revision = object.revision ?? 0;
    message.filters = object.filters?.map((e) => e) || [];
    return message;
  },
};

function createBaseSetSubscriberConfig_V1_Result(): SetSubscriberConfig_V1_Result {
  return { revision: 0, error: undefined };
}

export const SetSubscriberConfig_V1_Result: MessageFns<SetSubscriberConfig_V1_Result> = {
  encode(message: SetSubscriberConfig_V1_Result, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.revision !== 0) {
      writer.uint32(8).uint64(message.revision);
    }
    if (message.error !== undefined) {
      writer.uint32(18).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetSubscriberConfig_V1_Result {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSubscriberConfig_V1_Result();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.revision = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSubscriberConfig_V1_Result {
    return {
      revision: isSet(object.revision) ? globalThis.Number(object.revision) : 0,
      error: isSet(object.error) ? globalThis.String(object.error) : undefined,
    };
  },

  toJSON(message: SetSubscriberConfig_V1_Result): unknown {
    const obj: any = {};
    if (message.revision !== 0) {
      obj.revision = Math.round(message.revision);
    }
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetSubscriberConfig_V1_Result>, I>>(base?: I): SetSubscriberConfig_V1_Result {
    return SetSubscriberConfig_V1_Result.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetSubscriberConfig_V1_Result>, I>>(
    object: I,
  ): SetSubscriberConfig_V1_Result {
    const message = createBaseSetSubscriberConfig_V1_Result();
    message.revision = object.revision ?? 0;
    message.error = object.error ?? undefined;
    return message;
  },
};

function createBaseAnnounceStats(): AnnounceStats {
  return { concreteV1: undefined };
}

export const AnnounceStats: MessageFns<AnnounceStats> = {
  encode(message: AnnounceStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.concreteV1 !== undefined) {
      AnnounceStats_V1.encode(message.concreteV1, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnnounceStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnnounceStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.concreteV1 = AnnounceStats_V1.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnnounceStats {
    return { concreteV1: isSet(object.concreteV1) ? AnnounceStats_V1.fromJSON(object.concreteV1) : undefined };
  },

  toJSON(message: AnnounceStats): unknown {
    const obj: any = {};
    if (message.concreteV1 !== undefined) {
      obj.concreteV1 = AnnounceStats_V1.toJSON(message.concreteV1);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AnnounceStats>, I>>(base?: I): AnnounceStats {
    return AnnounceStats.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AnnounceStats>, I>>(object: I): AnnounceStats {
    const message = createBaseAnnounceStats();
    message.concreteV1 = (object.concreteV1 !== undefined && object.concreteV1 !== null)
      ? AnnounceStats_V1.fromPartial(object.concreteV1)
      : undefined;
    return message;
  },
};

function createBaseAnnounceStats_V1(): AnnounceStats_V1 {
  return { numPublishers: 0, numSubscribers: 0 };
}

export const AnnounceStats_V1: MessageFns<AnnounceStats_V1> = {
  encode(message: AnnounceStats_V1, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.numPublishers !== 0) {
      writer.uint32(8).uint64(message.numPublishers);
    }
    if (message.numSubscribers !== 0) {
      writer.uint32(16).uint64(message.numSubscribers);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnnounceStats_V1 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnnounceStats_V1();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.numPublishers = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.numSubscribers = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnnounceStats_V1 {
    return {
      numPublishers: isSet(object.numPublishers) ? globalThis.Number(object.numPublishers) : 0,
      numSubscribers: isSet(object.numSubscribers) ? globalThis.Number(object.numSubscribers) : 0,
    };
  },

  toJSON(message: AnnounceStats_V1): unknown {
    const obj: any = {};
    if (message.numPublishers !== 0) {
      obj.numPublishers = Math.round(message.numPublishers);
    }
    if (message.numSubscribers !== 0) {
      obj.numSubscribers = Math.round(message.numSubscribers);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AnnounceStats_V1>, I>>(base?: I): AnnounceStats_V1 {
    return AnnounceStats_V1.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AnnounceStats_V1>, I>>(object: I): AnnounceStats_V1 {
    const message = createBaseAnnounceStats_V1();
    message.numPublishers = object.numPublishers ?? 0;
    message.numSubscribers = object.numSubscribers ?? 0;
    return message;
  },
};

function createBaseMessage(): Message {
  return { concreteV1: undefined };
}

export const Message: MessageFns<Message> = {
  encode(message: Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.concreteV1 !== undefined) {
      Message_V1.encode(message.concreteV1, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.concreteV1 = Message_V1.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message {
    return { concreteV1: isSet(object.concreteV1) ? Message_V1.fromJSON(object.concreteV1) : undefined };
  },

  toJSON(message: Message): unknown {
    const obj: any = {};
    if (message.concreteV1 !== undefined) {
      obj.concreteV1 = Message_V1.toJSON(message.concreteV1);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message>, I>>(base?: I): Message {
    return Message.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message>, I>>(object: I): Message {
    const message = createBaseMessage();
    message.concreteV1 = (object.concreteV1 !== undefined && object.concreteV1 !== null)
      ? Message_V1.fromPartial(object.concreteV1)
      : undefined;
    return message;
  },
};

function createBaseMessage_V1(): Message_V1 {
  return { event: undefined, setSubscriberConfig: undefined, announceStats: undefined };
}

export const Message_V1: MessageFns<Message_V1> = {
  encode(message: Message_V1, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.event !== undefined) {
      Event.encode(message.event, writer.uint32(10).fork()).join();
    }
    if (message.setSubscriberConfig !== undefined) {
      SetSubscriberConfig.encode(message.setSubscriberConfig, writer.uint32(18).fork()).join();
    }
    if (message.announceStats !== undefined) {
      AnnounceStats.encode(message.announceStats, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_V1 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_V1();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.event = Event.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.setSubscriberConfig = SetSubscriberConfig.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.announceStats = AnnounceStats.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_V1 {
    return {
      event: isSet(object.event) ? Event.fromJSON(object.event) : undefined,
      setSubscriberConfig: isSet(object.setSubscriberConfig)
        ? SetSubscriberConfig.fromJSON(object.setSubscriberConfig)
        : undefined,
      announceStats: isSet(object.announceStats) ? AnnounceStats.fromJSON(object.announceStats) : undefined,
    };
  },

  toJSON(message: Message_V1): unknown {
    const obj: any = {};
    if (message.event !== undefined) {
      obj.event = Event.toJSON(message.event);
    }
    if (message.setSubscriberConfig !== undefined) {
      obj.setSubscriberConfig = SetSubscriberConfig.toJSON(message.setSubscriberConfig);
    }
    if (message.announceStats !== undefined) {
      obj.announceStats = AnnounceStats.toJSON(message.announceStats);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_V1>, I>>(base?: I): Message_V1 {
    return Message_V1.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_V1>, I>>(object: I): Message_V1 {
    const message = createBaseMessage_V1();
    message.event = (object.event !== undefined && object.event !== null) ? Event.fromPartial(object.event) : undefined;
    message.setSubscriberConfig = (object.setSubscriberConfig !== undefined && object.setSubscriberConfig !== null)
      ? SetSubscriberConfig.fromPartial(object.setSubscriberConfig)
      : undefined;
    message.announceStats = (object.announceStats !== undefined && object.announceStats !== null)
      ? AnnounceStats.fromPartial(object.announceStats)
      : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
